#define ERROR_SIZE 200
#define DESCRIPTION_SIZE 100
#define PORT_SIZE 50
#ifndef CONFIGURATION
#define CONFIGURATION
//registry_type - possible types of registers
typedef enum{
  coil,
	input_discrete,
	holding,
	input
} registry_type;

//stored_value_type - possible ways of setting/reading data from registers
//random_generated means that the data will be generated by the program
//fixed means that data will have a default value and will not be changed
//read means that data will be read from some sensor or other parts - not yet implemented
typedef enum {
	fixed_value,
	random_generated_value,
	read_value
} stored_value_type;

//Connection - structure to hold connection information
typedef struct connection {
	char 	port[PORT_SIZE];
	int 	speed;
} Connection;

//Registry - each slave will have one or more registries that can be read/written
typedef struct registry{
	int location;
	int length;
	int min;
	int max;
	registry_type type;
	stored_value_type value_type;
} Registry;

//Slave - structure tu define the slaves that will respond
typedef struct slave {
	int 	address;
	char 	description[100];
	Registry *registries;
	int registries_count;
} Slave;

//Configuration - structure to hold a configuration - possibly read from yaml.
typedef struct configuration{
	Connection conn;
	Slave *slaves;
  int slaves_count;
  void (*init) (struct configuration*);
} Configuration;

void init_configuration(struct configuration*);
#endif
